class DistortedGallery extends React.PureComponent {
    constructor(props) {
      super(props);
      
      this.changeTO = null;
      this.animatingTO = null;
      this.AUTOCHANGE_TIME = 4000;
      this.transitionTime = 1000; // default value, updated in DidMount
      
      this.state = {
        isAnimating: false,
        activeImg: 0,
        leftImg: this.getLimitIndex(),
        rightImg: 1,
        prevImgLeft: -1,
        prevImgRight: -1,
        noTransition: false,
      };
    }
    
    componentWillUnmount() {
      window.clearTimeout(this.changeTO);
      window.clearTimeout(this.animatingTO);
    }
    
    componentDidMount() {
      this.transitionTime = Number(getComputedStyle(this.galleryRef).getPropertyValue('--transition-time'));
      //this.runAutochangeTO();
    }
    
    runAutochangeTO = () => {
      this.changeTO = setTimeout(() => {
        this.changeImages();
        this.runAutochangeTO();
      }, this.AUTOCHANGE_TIME);
    }
    
    runAnimatingTO = () => {
      this.animatingTO = setTimeout(() => (
        this.setState({ noTransition: true, prevImgLeft: -1, prevImgRight: -1 }, () => {
          const layoutTrigger = this.galleryRef.offsetTop;
          this.setState({ noTransition: false, isAnimating: false });
        })
      ), this.transitionTime);
    }
    
    getLimitIndex = () => this.props.images.length - 1
    
    getImgIndex = (targetIndex) => {
      const limitIndex = this.getLimitIndex();
      if (targetIndex < 0) return limitIndex;
      if (targetIndex > limitIndex) return 0;
      return targetIndex;
    }
    
    changeImages = (back = false) => {
      window.clearTimeout(this.changeTO);
      if (this.state.isAnimating) return;
      const change = back ? -1 : 1;
      this.setState((st) => {
        const activeImg = this.getImgIndex(st.activeImg + change);
        return {
          isAnimating: true,
          activeImg: activeImg,
          leftImg: this.getImgIndex(activeImg - 1),
          rightImg: this.getImgIndex(activeImg + 1),
          ...(back ? { prevImgRight: st.activeImg } : { prevImgLeft: st.activeImg }),
        };
      }, this.runAnimatingTO);
    }
    
    render() {
      return (
        <div
          className={classNames(
            'distorted-gallery',
            { 's--no-transition': this.state.noTransition },
          )}
          ref={(_gal) => { this.galleryRef = _gal; }}
          >
          <div className="distorted-gallery__images">
            {this.props.images.map((src, i) => (
              <img
                className={classNames(
                  'distorted-gallery__image',
                  {
                    's--active': i === this.state.activeImg,
                    's--left': i === this.state.leftImg,
                    's--right': i === this.state.rightImg,
                    's--prev': i === this.state.prevImgLeft || i === this.state.prevImgRight,
                    's--prev-left': i === this.state.prevImgLeft,
                    's--prev-right': i === this.state.prevImgRight,
                  },
                )}
                src={src}
                alt={`Cute Cat â„–${i + 1}`}
              />
            ))}
          </div>
          <div
            className="distorted-gallery__control"
            onClick={() => this.changeImages(true)}
            />
          <div
            className="distorted-gallery__control distorted-gallery__control--right"
            onClick={() => this.changeImages()}
            />
        </div>
      );
    }
  }
  
  const NUM_OF_IMAGES = 7;
  const images = Array.from(Array(NUM_OF_IMAGES).keys()).map(i => (
    `https://s3-us-west-2.amazonaws.com/s.cdpn.io/142996/dis-slider-cat${i + 1}.jpg`
  ));
  
  ReactDOM.render(<DistortedGallery images={images} />, document.querySelector('#app'));